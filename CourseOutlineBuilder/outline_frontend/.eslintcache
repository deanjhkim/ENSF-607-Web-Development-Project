[{"/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/index.js":"1","/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/reportWebVitals.js":"2","/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/App.js":"3","/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Dashboard.js":"4","/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Outline.js":"5","/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Save.js":"6"},{"size":500,"mtime":1608235117699,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1608235117699,"results":"9","hashOfConfig":"8"},{"size":572,"mtime":1610594736790,"results":"10","hashOfConfig":"8"},{"size":9951,"mtime":1610604537293,"results":"11","hashOfConfig":"8"},{"size":56292,"mtime":1610607566544,"results":"12","hashOfConfig":"8"},{"size":47,"mtime":1610594736790,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ovrb4l",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/index.js",[],["28","29"],"/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/reportWebVitals.js",[],"/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/App.js",[],"/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Dashboard.js",["30","31","32"],"import React, { useEffect, useState } from 'react';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport { TableRow, TableCell, TableContainer, TableHead, TableBody, Table } from '@material-ui/core';\nimport { Grid, Box } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport { Dialog, DialogTitle, DialogContent, DialogActions } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core'\nimport { Paper } from '@material-ui/core';\nimport axios from 'axios';\nimport { AppBar, Toolbar } from '@material-ui/core';\nimport { useHistory } from 'react-router';\n\nconst useStyles = makeStyles({\n  toolbarButtons: {\n    marginLeft: 'auto',\n  },\n})\n\nconst baseUrl = \"http://localhost:8000/\";\n\nfunction OutlineTable(props) {\n\n  const { outlines, itemSelected, setItemSelected } = props;\n\n  const handleSelection = (e, index) => {\n    if (itemSelected === index) {\n      setItemSelected(null);\n    }\n    else {\n      setItemSelected(index);\n    }\n  };\n\n  let isSelected = (index) => itemSelected === index;\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Course Faculty</TableCell>\n            <TableCell align=\"left\">Course Number</TableCell>\n            <TableCell align=\"left\">Term</TableCell>\n            <TableCell align=\"left\">Section</TableCell>\n            <TableCell align=\"left\">Description</TableCell>\n            <TableCell align=\"left\">Date Created</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {outlines.map((row, index) => (\n            <TableRow key={index}\n              onClick={(e) =>\n                handleSelection(e, index)}\n              hover role=\"checkbox\"\n              selected={isSelected(index)}>\n              <TableCell>\n                {row.faculty}\n              </TableCell>\n              <TableCell align=\"left\">{row.number}</TableCell>\n              <TableCell align=\"left\">{row.term}</TableCell>\n              <TableCell align=\"left\">{row.section}</TableCell>\n              <TableCell align=\"left\">{row.description}</TableCell>\n              <TableCell align=\"left\">{row.date_created}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table >\n    </TableContainer >\n  );\n}\n\nfunction CreateFormDialog({ open, handleCreateClose, outlines, setOutlines }) {\n\n  const [faculty, setFaculty] = useState(\"\");\n  const [facultyError, setFacultyError] = useState(false);\n\n  const [number, setNumber] = useState(\"\");\n  const [numberError, setNumberError] = useState(false);\n\n  const [term, setTerm] = useState(\"\");\n  const [termError, setTermError] = useState(false);\n\n  const [section, setSection] = useState(\"\");\n  const [sectionError, setSectionError] = useState(false);\n\n  const [description, setDescription] = useState(\"\");\n  const [descError, setDescError] = useState(false);\n\n  const checkFields = () => {\n    if (faculty === \"\" || faculty === null) {\n      setFacultyError(true);\n    } else {\n      setFacultyError(false)\n    }\n    if (number === \"\" || number === null) {\n      setNumberError(true);\n    } else {\n      setNumberError(false)\n    }\n    if (term === \"\" || term === null) {\n      setTermError(true);\n    } else {\n      setTermError(false)\n    }\n    if (section === \"\" || section === null) {\n      setSectionError(true);\n    } else {\n      setSectionError(false)\n    }\n    if (description === \"\" || section === null) {\n      setDescError(true);\n    } else {\n      setDescError(false)\n    }\n  };\n\n  const filledFields = () => {\n    if (facultyError === false && numberError === false\n      && termError === false && sectionError === false\n      && descError === false) {\n      return true;\n    } else return false;\n  };\n\n  const postOutline = async (outline) => {\n    try {\n      axios.post(`${baseUrl}outlines/`, {\n        faculty: outline.faculty,\n        number: outline.number,\n        term: outline.term,\n        section: outline.section,\n        description: outline.description,\n        date_created: outline.date_created\n      }).then(response => {\n        console.log(`posted outline ${response.data.id} to backend`);\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const addOutline = (outline) => {\n    let _outlines = [...outlines]\n    _outlines.push(outline)\n    setOutlines(_outlines)\n  }\n\n  const handleCreate = () => {\n\n    console.log(\"handling outline creation...\");\n    checkFields();\n\n    const today = new Date();\n    const day = (\"0\" + (today.getDate())).slice(-2);\n    const month = (\"0\" + (today.getMonth() + 1)).slice(-2);\n    const year = today.getFullYear();\n    const date = `${year}-${month}-${day}`;\n\n    const outline = { faculty: faculty, number: number, term: term, section: section, description: description, date_created: date }\n\n    if (filledFields()) {\n      console.log(\"creating outline...\");\n      addOutline(outline);\n      postOutline(outline);\n      handleCreateClose();\n    }\n  }\n\n  const displayErrors = () => {\n    console.log(facultyError);\n    console.log(numberError);\n    console.log(termError);\n    console.log(sectionError);\n    console.log(descError);\n  }\n\n  const displayFields = () => {\n    console.log(faculty);\n    console.log(number);\n    console.log(term);\n    console.log(section);\n    console.log(description);\n  }\n\n  return (\n    <Dialog open={open}>\n      <DialogTitle>\n        Create New Outline\n      </DialogTitle>\n      <DialogContent>\n        <Grid container>\n          <Grid container>\n            <Grid item xs>\n              <TextField label='Faculty' onChange={e => setFaculty(e.target.value)} error={facultyError} helperText={facultyError ? \"Field Required\" : ''} />\n            </Grid>\n            <Grid item xs>\n              <TextField label='Number' onChange={e => setNumber(e.target.value)} error={numberError} helperText={numberError ? \"Field Required\" : ''} />\n            </Grid>\n          </Grid>\n          <Grid container>\n            <Grid item xs>\n              <TextField label='Term' error={termError} onChange={e => setTerm(e.target.value)} helperText={termError ? \"Field Required\" : ''} />\n            </Grid>\n            <Grid item xs>\n              <TextField label='Section' onChange={e => setSection(e.target.value)} error={sectionError} helperText={sectionError ? \"Field Required\" : ''} />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Box>\n          <TextField label='Description' fullWidth onChange={e => setDescription(e.target.value)} error={descError} helperText={descError ? \"Field Required\" : ''} />\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleCreateClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button color=\"primary\" onClick={handleCreate}>\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction MenuBar(props) {\n\n  const { handleCreateOpen, handleOpen, handleDelete } = props\n\n  const classes = useStyles()\n\n  return (\n    <AppBar position='static'>\n      <Toolbar>\n        <Box paddingLeft={2}>\n          <h1>\n            Course Outline Builder\n        </h1>\n        </Box>\n        <Box paddingRight={5} className={classes.toolbarButtons}>\n          <ButtonGroup variant=\"contained\" color=\"secondary\" aria-label=\"outlined primary button group\">\n            <Button onClick={handleCreateOpen}>Create </Button>\n            <Button onClick={handleOpen}>Open </Button>\n            <Button onClick={handleDelete}>Delete</Button>\n          </ButtonGroup>\n        </Box>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\n\nfunction Dashboard() {\n\n  const [outlines, setOutlines] = useState([])\n\n  const [open, setCreateOpen] = useState(false);\n\n  const [itemSelected, setItemSelected] = useState(null);\n\n  const [selectedID, setSelectedID] = useState(\"1\")\n\n  useEffect(() => {\n    console.log('loading outlines from backend...')\n    getOutlines();\n\n  }, [])\n\n  useEffect(() => {\n    if(outlines[itemSelected]!=null){\n      setSelectedID(outlines[itemSelected.id])\n      console.log(itemSelected)\n      console.log(selectedID)\n      console.log(outlines)\n    }\n  },[itemSelected])\n\n  const getOutlines = async () => {\n    try {\n      axios.get(`${baseUrl}outlines/`)\n        .then((response) => setOutlines(response.data));\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const deleteOutline = async (id) => {\n    try {\n      axios.delete(`${baseUrl}outlines/${id}/`)\n      console.log(`deleted outline ${id} from backend`)\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  const handleCreateOpen = () => setCreateOpen(true);\n\n  const handleCreateClose = () => setCreateOpen(false);\n\n  const handleDelete = () => {\n    if (itemSelected >= 0 && itemSelected < outlines.length) {\n      deleteOutline(outlines[itemSelected].id)\n      let _outlines = [...outlines];\n      _outlines.splice(itemSelected, 1);\n      setOutlines(_outlines);\n    }\n  }\n\n  const handleOpen = () => {\n    if (itemSelected >= 0 && itemSelected < outlines.length && outlines[itemSelected]!=null) {\n      const outlineID = outlines[itemSelected].id\n      console.log(`opening outline ${outlineID} ...`)\n      goToOutline(outlineID)\n    } else if(outlines[itemSelected] == null && outlines.length > 0){\n      goToOutline(0)\n    }\n  }\n\n  const history = useHistory();\n\n  const goToOutline = (id) => {\n    //pushes data to Outline component on click\n    history.push('/outline', { outlineID: id })\n  }\n\n  return (\n    <div className=\"Dashboard\">\n\n      <MenuBar handleCreateOpen={handleCreateOpen} handleOpen={handleOpen} handleDelete={handleDelete} />\n      <Box paddingTop={20}>\n        <OutlineTable outlines={outlines} itemSelected={itemSelected} setItemSelected={setItemSelected} />\n      </Box>\n      <CreateFormDialog open={open} handleCreateClose={handleCreateClose} goToOutline={goToOutline} outlines={outlines} setOutlines={setOutlines} />\n\n\n    </div >\n\n  );\n}\n\nexport default Dashboard;\n","/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Outline.js",["33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52"],"/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Save.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":169,"column":9,"nodeType":"59","messageId":"60","endLine":169,"endColumn":22},{"ruleId":"57","severity":1,"message":"61","line":177,"column":9,"nodeType":"59","messageId":"60","endLine":177,"endColumn":22},{"ruleId":"62","severity":1,"message":"63","line":275,"column":5,"nodeType":"64","endLine":275,"endColumn":19,"suggestions":"65"},{"ruleId":"57","severity":1,"message":"66","line":25,"column":8,"nodeType":"59","messageId":"60","endLine":25,"endColumn":12},{"ruleId":"57","severity":1,"message":"67","line":38,"column":11,"nodeType":"59","messageId":"60","endLine":38,"endColumn":18},{"ruleId":"57","severity":1,"message":"68","line":42,"column":23,"nodeType":"59","messageId":"60","endLine":42,"endColumn":35},{"ruleId":"57","severity":1,"message":"69","line":88,"column":12,"nodeType":"59","messageId":"60","endLine":88,"endColumn":28},{"ruleId":"57","severity":1,"message":"70","line":89,"column":12,"nodeType":"59","messageId":"60","endLine":89,"endColumn":22},{"ruleId":"57","severity":1,"message":"71","line":90,"column":12,"nodeType":"59","messageId":"60","endLine":90,"endColumn":23},{"ruleId":"57","severity":1,"message":"72","line":90,"column":25,"nodeType":"59","messageId":"60","endLine":90,"endColumn":39},{"ruleId":"57","severity":1,"message":"73","line":91,"column":12,"nodeType":"59","messageId":"60","endLine":91,"endColumn":24},{"ruleId":"57","severity":1,"message":"74","line":92,"column":12,"nodeType":"59","messageId":"60","endLine":92,"endColumn":23},{"ruleId":"57","severity":1,"message":"75","line":93,"column":12,"nodeType":"59","messageId":"60","endLine":93,"endColumn":27},{"ruleId":"57","severity":1,"message":"76","line":94,"column":12,"nodeType":"59","messageId":"60","endLine":94,"endColumn":21},{"ruleId":"57","severity":1,"message":"77","line":95,"column":12,"nodeType":"59","messageId":"60","endLine":95,"endColumn":20},{"ruleId":"57","severity":1,"message":"78","line":97,"column":12,"nodeType":"59","messageId":"60","endLine":97,"endColumn":18},{"ruleId":"57","severity":1,"message":"79","line":97,"column":20,"nodeType":"59","messageId":"60","endLine":97,"endColumn":29},{"ruleId":"62","severity":1,"message":"80","line":278,"column":8,"nodeType":"64","endLine":278,"endColumn":10,"suggestions":"81"},{"ruleId":"62","severity":1,"message":"82","line":461,"column":8,"nodeType":"64","endLine":462,"endColumn":6,"suggestions":"83"},{"ruleId":"57","severity":1,"message":"84","line":944,"column":12,"nodeType":"59","messageId":"60","endLine":944,"endColumn":20},{"ruleId":"57","severity":1,"message":"74","line":971,"column":12,"nodeType":"59","messageId":"60","endLine":971,"endColumn":23},{"ruleId":"85","severity":1,"message":"86","line":1023,"column":13,"nodeType":"87","messageId":"88","endLine":1027,"endColumn":14},{"ruleId":"85","severity":1,"message":"86","line":1041,"column":13,"nodeType":"87","messageId":"88","endLine":1045,"endColumn":14},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'displayErrors' is assigned a value but never used.","Identifier","unusedVar","'displayFields' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'outlines' and 'selectedID'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSelectedID' needs the current value of 'outlines'.","ArrayExpression",["91"],"'Save' is defined but never used.","'classes' is assigned a value but never used.","'setOutlineID' is assigned a value but never used.","'learningOutcomes' is assigned a value but never used.","'timetables' is assigned a value but never used.","'instructors' is assigned a value but never used.","'setInstructors' is assigned a value but never used.","'examinations' is assigned a value but never used.","'calculators' is assigned a value but never used.","'gradeComponents' is assigned a value but never used.","'textbooks' is assigned a value but never used.","'policies' is assigned a value but never used.","'loaded' is assigned a value but never used.","'setLoaded' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCalculators', 'getCalendarInformation', 'getExaminations', 'getGradeComponents', 'getLearningOutcomes', 'getOutline', 'getPolicies', 'getTextbooks', 'getTimetables', and 'outlineID'. Either include them or remove the dependency array.",["92"],"React Hook useEffect has missing dependencies: 'calendarInfoID', 'createCalendarInfo', and 'setCalendarInfo'. Either include them or remove the dependency array.",["93"],"'examInfo' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [itemSelected, outlines, selectedID]",{"range":"100","text":"101"},"Update the dependencies array to be: [getCalculators, getCalendarInformation, getExaminations, getGradeComponents, getLearningOutcomes, getOutline, getPolicies, getTextbooks, getTimetables, outlineID]",{"range":"102","text":"103"},"Update the dependencies array to be: [courseDesc, courseHours, courseCredits, calendarRef, calendarInfo.outline, setCalendarInfo, createCalendarInfo, calendarInfoID]",{"range":"104","text":"105"},[8124,8138],"[itemSelected, outlines, selectedID]",[10139,10141],"[getCalculators, getCalendarInformation, getExaminations, getGradeComponents, getLearningOutcomes, getOutline, getPolicies, getTextbooks, getTimetables, outlineID]",[16630,16710],"[courseDesc, courseHours, courseCredits, calendarRef, calendarInfo.outline, setCalendarInfo, createCalendarInfo, calendarInfoID]"]