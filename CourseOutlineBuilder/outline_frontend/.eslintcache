[{"/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/index.js":"1","/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/reportWebVitals.js":"2","/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/App.js":"3","/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Dashboard.js":"4","/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Outline.js":"5","/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Save.js":"6"},{"size":500,"mtime":1608235117699,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1608235117699,"results":"9","hashOfConfig":"8"},{"size":572,"mtime":1610592437233,"results":"10","hashOfConfig":"8"},{"size":9347,"mtime":1610592441634,"results":"11","hashOfConfig":"8"},{"size":55853,"mtime":1610591720841,"results":"12","hashOfConfig":"8"},{"size":47,"mtime":1610588563316,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ovrb4l",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/index.js",[],["28","29"],"/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/reportWebVitals.js",[],"/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/App.js",[],"/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Dashboard.js",["30","31"],"/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Outline.js",["32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51"],"import React from 'react';\nimport { useState, useEffect } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Grid from '@material-ui/core/Grid'\nimport { Dialog, DialogTitle, DialogContent, DialogActions, makeStyles } from '@material-ui/core';\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { useLocation } from 'react-router';\nimport axios from 'axios';\nimport Save from './Save'\nexport default Outline;\n\n\nconst useStyles = makeStyles((theme) => ({\n    background: {\n        color: 'primary'\n    }\n\n}));\n\nfunction Outline(props) {\n\n    const classes = useStyles;\n\n    // Getting the outlint rest Url.\n    const location = useLocation();\n    const [outlineID, setOutlineID] = useState(location.state.outlineID);\n\n    const baseUrl = 'http://localhost:8000/';\n\n\n    //States that hold data objects for outline components.\n\n    const [outline, setOutline] = useState({});\n    const [calendarInfo, setCalendarInfo] = useState({});\n    const [learningOutcomes, setLearningOutcomes] = useState([]);\n    const [timetables, setTimetables] = useState([]);\n    const [instructors, setInstructors] = useState([]);\n    const [examinations, setExaminations] = useState({});\n    const [calculators, setCalculators] = useState({});\n    const [gradeComponents, setGradeComponents] = useState([]);\n    const [textbooks, setTextbooks] = useState([]);\n    const [policies, setPolicies] = useState([]);\n\n    const [loaded, setLoaded] = useState(false);\n\n    // Functions to create data objects\n\n    const createCalendarInfo = (id, description, hours, credit, calendar_reference, outline) => {\n        return { id, description, hours, credit, calendar_reference, outline }\n    }\n\n    const createLearningOutcome = (id, number, outcome, attribute, level, outline) => {\n        return { id, number, outcome, attribute, level, outline }\n    }\n\n    const createTimetable = (id, section, days, time, location, outline) => {\n        return { id, section, days, time, location, outline }\n    }\n\n    // const createInstructor = (id, section, first_name, last_name, phone, office, email, outline) => {\n    //     return { id, section, first_name, last_name, phone, office, email, outline }\n    // }\n\n    const createExamination = (id, text, outline) => {\n        return { id, text, outline }\n    }\n\n    const createCalculator = (id, text, outline) => {\n        return { id, text, outline }\n    }\n\n    const createGradeComponent = (id, component, outcomes, weight, outline) => {\n        return { id, component, outcomes, weight, outline }\n    }\n\n    const createTextbook = (id, title, author, year, publisher, requirement, outline) => {\n        return { id, title, author, year, publisher, requirement, outline }\n    }\n\n    const createPolicy = (id, policy, outline) => {\n        return { id, policy, outline }\n    }\n\n    //Functions to load data from the rest api.\n\n    const getOutline = async () => {\n        try {\n            axios.get(`${baseUrl}outlines/${outlineID}/`)\n                .then((response) => setOutline(response.data));\n\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const getCalendarInformation = async () => {\n        try {\n            axios.get(`${baseUrl}calendarinformation/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length === 0) {\n                        console.log('no calendar data found');\n                        setCalendarInfo(createCalendarInfo(null, \"\", \"\", \"\", \"\", outlineID));\n                    } else {\n                        console.log('calendar data found');\n                        setCalendarInfo(response.data[0]);\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const getLearningOutcomes = async () => {\n        try {\n            axios.get(`${baseUrl}learningoutcomes/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length === 0) {\n                        console.log('no learning outcome data found');\n                        setLearningOutcomes([createLearningOutcome(null, \"0\", \"\", \"\", \"\", outlineID)]);\n                    } else {\n                        console.log('learning outcome data found');\n                        setLearningOutcomes(response.data);\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const getTimetables = async () => {\n        try {\n            axios.get(`${baseUrl}timetables/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length === 0) {\n                        console.log('no timetable data found');\n                        setTimetables([createTimetable(null, \"\", \"\", \"\", \"\", outlineID)]);\n                    } else {\n                        console.log('timetable data found');\n                        setTimetables(response.data);\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    // const getInstructors = async () => {\n    //     try {\n    //         axios.get(`${baseUrl}instructors/?outline=${outlineID}`)\n    //             .then((response) => {\n    //                 if (response.data.length === 0) {\n    //                     console.log('no instructor data found');\n    //                     setInstructors([createInstructor(null, \"\", \"\", \"\", \"\", \"\", \"\", outlineID)]);\n    //                 } else {\n    //                     console.log('instructor data found');\n    //                     setInstructors(response.data);\n    //                 }\n    //             })\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n    // }\n\n    const getExaminations = async () => {\n        try {\n            axios.get(`${baseUrl}examinations/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length === 0) {\n                        console.log('no examination data found');\n                        setExaminations(createExamination(null, \"\", outlineID));\n                    } else {\n                        console.log('examination data found');\n                        setExaminations(response.data[0]);\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n\n    const getCalculators = async () => {\n        try {\n            axios.get(`${baseUrl}calculators/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length === 0) {\n                        console.log('no calculators data found');\n                        setCalculators(createCalculator(null, \"\", outlineID));\n                    } else {\n                        console.log('calculators data found');\n                        setCalculators(response.data[0]);\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const getGradeComponents = async () => {\n        try {\n            axios.get(`${baseUrl}finalgradecomponents/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length === 0) {\n                        console.log('no final grade component data found')\n                        setGradeComponents([createGradeComponent(null, \"\", outlineID)]);\n                    } else {\n                        console.log('final grade component data found')\n                        setGradeComponents(response.data)\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const getTextbooks = async () => {\n        try {\n            axios.get(`${baseUrl}textbooks/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length === 0) {\n                        console.log('no textbook data found');\n                        setTextbooks(createTextbook(null, \"\", \"\", \"\", \"\", \"\", outlineID));\n                    } else {\n                        console.log('textbook data found');\n                        setTextbooks(response.data);\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const getPolicies = async () => {\n        try {\n            axios.get(`${baseUrl}policies/?outline=${outlineID}`)\n                .then((response) => {\n                    if (response.data.length === 0) {\n                        console.log('no policy data found');\n                        setPolicies(createPolicy(null, \"\", outlineID));\n                    } else {\n                        console.log('policy data found');\n                        setPolicies(response.data);\n                    }\n                })\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    // Initial render use effect\n    useEffect(() => {\n        console.log(`outline ${outlineID} has been opened...`);\n        console.log('loading outline from backend...');\n        getOutline();\n        getCalendarInformation();\n        getLearningOutcomes();\n        getTimetables();\n        // getInstructors();\n        getExaminations();\n        getCalculators();\n        getGradeComponents();\n        getTextbooks();\n        getPolicies();\n    }, [])\n\n    console.log(calendarInfo)\n\n    // useEffect(() => {\n\n    //     console.log('DATA: ');\n    //     console.log('outline: ');\n    //     console.log(outline);\n    //     console.log('calendar: ');\n    //     console.log(calendarInfo);\n    //     console.log('learning outcomes: ');\n    //     console.log(learningOutcomes);\n    //     console.log('Timetable: ');\n    //     console.log(timetables);\n    //     // console.log('Instructors: ');\n    //     // console.log(instructors);\n    //     console.log('Examinations: ');\n    //     console.log(examinations);\n    //     console.log('calculator: ');\n    //     console.log(calculators);\n    //     console.log('final grade components: ');\n    //     console.log(gradeComponents);\n    //     console.log('Textbooks: ');\n    //     console.log(textbooks);\n    //     console.log('Policies: ');\n    //     console.log(policies);\n    // })\n\n    // Save states\n    const handleSaveOpen = () => setSaveOpen(true);\n    const handleSaveClose = () => setSaveOpen(false);\n    const [open, setSaveOpen] = useState(false);\n\n    const handleSave = () => {\n        handleSaveOpen()\n        console.log('SAVING OUTLINE...')\n        saveCalendarInfo()\n        console.log('SAVE COMPLETE')\n    };\n\n    const saveCalendarInfo = async () => {\n        console.log(calendarInfo.id)\n        if (calendarInfo.id != null) {\n            try {\n                console.log('deleting old calendar info')\n                axios.delete(`${baseUrl}calendarinformation/${calendarInfo.id}`)\n            } catch (error) {\n                console.log(error)\n                return\n            }\n        }\n        try {\n            console.log('posting calendar info')\n            axios.post(`${baseUrl}calendarinformation/`, {\n                description: calendarInfo.description,\n                hours: calendarInfo.hours,\n                credit: calendarInfo.credit,\n                calendar_reference: calendarInfo.calendar_reference,\n                outline: outlineID\n            }\n            ).then((response) => {\n                setCalendarInfo(response.data);\n            });\n        } catch (error) {\n            console.log(error)\n        }\n        // else {\n        //     console.log('putting calendar info')\n        //     console.log(calendarInfo)\n        //     axios.put(`${baseUrl}calendarinformation/${calendarInfo.id}/`, calendarInfo).then((response) => {\n        //         console.log(response);\n        //     });;\n        // }\n    }\n\n    return (\n\n        <div className=\"Outline\">\n            <MenuBar handleSaveOpen={handleSaveOpen} handleSave={handleSave} />\n            <Grid container justify='center'>\n                <Grid item align='center'>\n                    <Box component={Paper} align='left'>\n                        <br></br>\n                        <br></br>\n                        <br></br>\n                        <h1>\n                            {`${outline.faculty} ${outline.number} `}\n                            <br />\n                            {`${outline.description}`}\n                        </h1>\n                        <h2>\n                            {`${outline.term}`}\n                        </h2>\n                        <h2>\n                            {`Section: ${outline.section}`}\n                        </h2>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <CalendarInfo calendarInfoID={calendarInfo.id} calendarInfo={calendarInfo} setCalendarInfo={setCalendarInfo} createCalendarInfo={createCalendarInfo} />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <LearningOutcomes />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <Timetable />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <CourseInstructors />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <Examinations />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <UseOfCalculators />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <FinalGradeDetermination />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <Textbook />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <Box border={2} align='center'>\n                            <CoursePolicies />\n                        </Box>\n                        <br></br>\n                        <br></br>\n\n                        <CreateSaveDialog open={open} handleSaveClose={handleSaveClose} />\n                    </Box>\n                </Grid>\n            </Grid>\n        </div >\n    );\n}\n\n\nfunction CalendarInfo(props) {\n\n    const { calendarInfoID, calendarInfo, setCalendarInfo, createCalendarInfo } = props;\n\n    const [courseDesc, setCourseDesc] = useState(\"\");\n    const [courseHours, setCourseHours] = useState(\"\");\n    const [courseCredits, setCourseCredits] = useState(\"\");\n    const [calendarRef, setCalendarRef] = useState(\"\");\n\n    useEffect(() => {\n        setCalendarInfo(createCalendarInfo(calendarInfoID, courseDesc, courseHours, courseCredits, calendarRef, calendarInfo.outline));\n    }, [courseDesc, courseHours, courseCredits, calendarRef, calendarInfo.outline\n    ])\n\n    return (\n        <Box width=\"95%\" align='left'>\n            <h2>\n                1. Calendar Information\n            </h2>\n            <h3>\n                Course Description\n            </h3>\n            <TextField\n                multiline={true}\n                rows={12}\n                rowsMax={12}\n                fullWidth={true}\n                value={calendarInfo.description}\n                placeholder=\"Enter Course Description\"\n                onChange={(e) => setCourseDesc(e.target.value)}\n            />\n            <h3>\n                Course Hours\n                </h3>\n\n            <TextField\n                multiline={true}\n                value={calendarInfo.hours}\n                placeholder=\"Enter Course Hours\"\n                onChange={(e) => setCourseHours(e.target.value)}\n            />\n\n            <h3>\n                Academic Credit\n                </h3>\n            <TextField\n                multiline={true}\n                value={calendarInfo.credit}\n                placeholder=\"Enter Number of Credits\"\n                onChange={(e) => setCourseCredits(e.target.value)}\n            />\n            <h3>\n                Calendar Reference\n                </h3>\n            <TextField\n                multiline={true}\n                fullWidth={true}\n                value={calendarInfo.calendar_reference}\n                placeholder=\"Enter Calendar Reference URL\"\n                onChange={(e) => setCalendarRef(e.target.value)}\n                border={1}\n            />\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n};\n\nfunction LearningOutcomes() {\n\n    const createRow = (one, two, three) => {\n        return { one, two, three };\n    };\n    const [tableRows, setTableRows] = useState([createRow(\"\", \"\", \"\")]);\n    const setValue = (index, column, value) => {\n        let newRows = tableRows;\n        newRows[index][column] = value;\n        setTableRows(newRows);\n        console.log(tableRows);\n    };\n    const deleteRow = (index) => {\n        console.log(index)\n        console.log(tableRows)\n\n        let arr = [...tableRows]\n\n        arr.splice(index, 1)\n\n        setTableRows(arr)\n\n        console.log(tableRows)\n\n    };\n    const addRow = () => {\n        setTableRows(tableRows.concat([createRow(\"\", \"\", \"\")]));\n        console.log(tableRows)\n    };\n    const [editIdx, setEditIdx] = useState(-1);\n    const startEdit = idx => {\n        setEditIdx(idx);\n    };\n    const stopEdit = () => {\n        setEditIdx(-1);\n    };\n\n    return (\n        <Box Box width=\"95%\" align='left'>\n            <h2>\n                2. Learning Outcomes\n            </h2>\n\n            <div>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>#</TableCell>\n                                <TableCell>Learning Outcome</TableCell>\n                                <TableCell>Grade Attribute</TableCell>\n                                <TableCell>Instruction Level</TableCell>\n                                <TableCell>Edit</TableCell>\n                                <TableCell>Delete</TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {tableRows.map((row, index) => (\n                                <TableRow key={index}>\n                                    <TableCell align=\"left\">\n                                        {index + \"  \"}\n                                    </TableCell>\n\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.one}\n                                                onChange={(e) => setValue(index, 'one', e.target.value)} placeholder='Enter Learning Outcome' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.one}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <Select\n                                                defaultValue={row.two}\n                                                onChange={(e) => setValue(index, 'two', e.target.value)} >\n                                                <MenuItem value=\"\">\n                                                    <em>None</em>\n                                                </MenuItem>\n                                                <MenuItem value={\"A1\"}>A1</MenuItem>\n                                                <MenuItem value={\"A2\"}>A2</MenuItem>\n                                                <MenuItem value={\"A3\"}>A3</MenuItem>\n                                                <MenuItem value={\"A4\"}>A4</MenuItem>\n                                                <MenuItem value={\"A5\"}>A5</MenuItem>\n                                                <MenuItem value={\"A6\"}>A6</MenuItem>\n                                                <MenuItem value={\"A7\"}>A7</MenuItem>\n                                                <MenuItem value={\"A8\"}>A8</MenuItem>\n                                                <MenuItem value={\"A9\"}>A9</MenuItem>\n                                                <MenuItem value={\"A10\"}>A10</MenuItem>\n                                                <MenuItem value={\"A11\"}>A11</MenuItem>\n                                                <MenuItem value={\"A12\"}>A12</MenuItem>\n                                            </Select>\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.two}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <Select\n                                                defaultValue={row.two}\n                                                onChange={(e) => setValue(index, 'two', e.target.value)} >\n                                                <MenuItem value=\"\">\n                                                    <em>None</em>\n                                                </MenuItem>\n                                                <MenuItem value={\"I\"}>I</MenuItem>\n                                                <MenuItem value={\"D\"}>D</MenuItem>\n                                                <MenuItem value={\"A\"}>A</MenuItem>\n                                            </Select>\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.three}\n                                        </TableCell>)}\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <EditIcon onClick={() => startEdit(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CheckIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <DeleteIcon onClick={(e) => deleteRow(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CloseIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <br />\n\n                <div>\n                    <Button onClick={addRow} variant='contained' color='primary'>\n                        Create Row\n                            </Button>\n                </div>\n            </div>\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n};\n\nfunction Timetable() {\n\n    //id, section, days, time, location, outline (outlineID)\n    const createRow = (one, two, three, four) => {\n        return { one, two, three, four };\n    };\n    const [tableRows, setTableRows] = useState([createRow(\"\", \"\", \"\", \"\")]);\n    const setValue = (index, column, value) => {\n        let newRows = tableRows;\n        newRows[index][column] = value;\n        setTableRows(newRows);\n        console.log(tableRows);\n    };\n    const deleteRow = (index) => {\n        console.log(index)\n        console.log(tableRows)\n\n        let arr = [...tableRows]\n\n        arr.splice(index, 1)\n\n        setTableRows(arr)\n\n        console.log(tableRows)\n\n    };\n    const addRow = () => {\n        setTableRows(tableRows.concat([createRow(\"\", \"\", \"\", \"\")]));\n        console.log(tableRows)\n    };\n    const [editIdx, setEditIdx] = useState(-1);\n    const startEdit = idx => {\n        setEditIdx(idx);\n    };\n    const stopEdit = () => {\n        setEditIdx(-1);\n    };\n\n    return (\n        <Box Box width=\"95%\" align='left'>\n            <h2>\n                3. Timetable\n            </h2>\n\n            <div>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Section</TableCell>\n                                <TableCell>Day(s) of Week</TableCell>\n                                <TableCell>Time</TableCell>\n                                <TableCell>Location</TableCell>\n                                <TableCell>Edit</TableCell>\n                                <TableCell>Delete</TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {tableRows.map((row, index) => (\n                                <TableRow key={index}>\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.one}\n                                                onChange={(e) => setValue(index, 'one', e.target.value)} placeholder='Enter Section' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.one}\n                                        </TableCell>)}\n\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.two}\n                                                onChange={(e) => setValue(index, 'two', e.target.value)} placeholder='Enter Day(s) of Week' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.two}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.three}\n                                                onChange={(e) => setValue(index, 'three', e.target.value)} placeholder='Enter Time' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.three}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.four}\n                                                onChange={(e) => setValue(index, 'four', e.target.value)} placeholder='Enter Location' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.four}\n                                        </TableCell>)}\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <EditIcon onClick={() => startEdit(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CheckIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <DeleteIcon onClick={(e) => deleteRow(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CloseIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <br />\n\n                <div>\n                    <Button onClick={addRow} variant='contained' color='primary'>\n                        Create Row\n                            </Button>\n                </div>\n            </div>\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n};\n\nfunction CourseInstructors() {\n\n    const createRow = (one, two, three, four, five, six) => {\n        return { one, two, three, four, five, six };\n    };\n    const [tableRows, setTableRows] = useState([createRow(\"\", \"\", \"\", \"\", \"\", \"\")]);\n    const setValue = (index, column, value) => {\n        let newRows = tableRows;\n        newRows[index][column] = value;\n        setTableRows(newRows);\n        console.log(tableRows);\n    };\n    const deleteRow = (index) => {\n        console.log(index)\n        console.log(tableRows)\n\n        let arr = [...tableRows]\n\n        arr.splice(index, 1)\n\n        setTableRows(arr)\n\n        console.log(tableRows)\n\n    };\n    const addRow = () => {\n        setTableRows(tableRows.concat([createRow(\"\", \"\", \"\", \"\", \"\", \"\")]));\n        console.log(tableRows)\n    };\n    const [editIdx, setEditIdx] = useState(-1);\n    const startEdit = idx => {\n        setEditIdx(idx);\n    };\n    const stopEdit = () => {\n        setEditIdx(-1);\n    };\n\n    return (\n        <Box Box width=\"95%\" align='left'>\n            <h2>\n                4. Course Instructors\n            </h2>\n\n            <div>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Section</TableCell>\n                                <TableCell>First Name</TableCell>\n                                <TableCell>Family Name</TableCell>\n                                <TableCell>Phone</TableCell>\n                                <TableCell>Office</TableCell>\n                                <TableCell>Email</TableCell>\n                                <TableCell>Edit</TableCell>\n                                <TableCell>Delete</TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {tableRows.map((row, index) => (\n                                <TableRow key={index}>\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.one}\n                                                onChange={(e) => setValue(index, 'one', e.target.value)} placeholder='Enter Section' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.one}\n                                        </TableCell>)}\n\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.two}\n                                                onChange={(e) => setValue(index, 'two', e.target.value)} placeholder='Enter First Name' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.two}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.three}\n                                                onChange={(e) => setValue(index, 'three', e.target.value)} placeholder='Enter Family Name' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.three}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.four}\n                                                onChange={(e) => setValue(index, 'four', e.target.value)} placeholder='Enter Phone' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.four}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.five}\n                                                onChange={(e) => setValue(index, 'five', e.target.value)} placeholder='Enter Office' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.five}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.four}\n                                                onChange={(e) => setValue(index, 'six', e.target.value)} placeholder='Enter Email' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.six}\n                                        </TableCell>)}\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <EditIcon onClick={() => startEdit(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CheckIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <DeleteIcon onClick={(e) => deleteRow(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CloseIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <br />\n\n                <div>\n                    <Button onClick={addRow} variant='contained' color='primary'>\n                        Create Row\n                            </Button>\n                </div>\n            </div>\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n};\n\nfunction Examinations() {\n\n    const [examInfo, setExamInfo] = useState(\"\");\n\n    return (\n        <Box Box width=\"95%\" align='left'>\n            <h2>\n                5. Examinations\n                </h2>\n            <h3>\n                Examination Information\n                </h3>\n            <TextField\n                multiline={true}\n                rows={12}\n                rowsMax={12}\n                fullWidth={true}\n                placeholder=\"Enter Examination Information\"\n                onChange={(e) => setExamInfo(e.target.value)}\n            />\n            <br></br>\n            <br></br>\n        </Box>\n    );\n\n};\n\nfunction UseOfCalculators() {\n\n    const [calculators, setCalculators] = useState(\"\");\n\n    return (\n        <Box width=\"95%\" align='left'>\n            <h2>\n                6. Use Of Calculators in Examinations\n        </h2>\n\n            <TextField\n\n                fullWidth={true}\n                placeholder=\"Enter Calculator Policy\"\n                onChange={(e) => setCalculators(e.target.value)}\n                border={1}\n            />\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n};\n\nfunction FinalGradeDetermination() {\n\n    const createRow = (one, two, three) => {\n        return { one, two, three };\n    };\n    const [tableRows, setTableRows] = useState([createRow(\"\", \"\", \"\")]);\n    const [sum, setSum] = useState(0);\n    const setValue = (index, column, value) => {\n        let newRows = tableRows;\n        newRows[index][column] = value;\n        setTableRows(newRows);\n        console.log(tableRows);\n        updateSum();\n    };\n    const deleteRow = (index) => {\n        console.log(index)\n        console.log(tableRows)\n\n        let arr = [...tableRows]\n\n        arr.splice(index, 1)\n\n        setTableRows(arr)\n\n        console.log(tableRows)\n\n        let total = 0;\n        for (let i = 0; i < arr.length; i++) {\n            console.log(parseInt(arr[i][\"three\"]));\n            let n = parseInt(arr[i][\"three\"])\n            {\n                Number.isInteger(n) ?\n                    (total += n) :\n                    (total += 0)\n            }\n        };\n        setSum(total);\n\n    };\n    const addRow = () => {\n        setTableRows(tableRows.concat([createRow(\"\", \"\", \"\")]));\n        console.log(tableRows)\n    };\n    const updateSum = () => {\n        let total = 0;\n        for (let i = 0; i < tableRows.length; i++) {\n            console.log(parseInt(tableRows[i][\"three\"]));\n            let n = parseInt(tableRows[i][\"three\"])\n            {\n                Number.isInteger(n) ?\n                    (total += n) :\n                    (total += 0)\n            }\n        };\n        setSum(total);\n    };\n    const [editIdx, setEditIdx] = useState(-1);\n    const startEdit = idx => {\n        setEditIdx(idx);\n    };\n    const stopEdit = () => {\n        setEditIdx(-1);\n    };\n\n\n    return (\n        <Box Box width=\"95%\" align='left'>\n            <h2>\n                7. Final Grade Determination\n            </h2>\n\n            <div>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Component</TableCell>\n                                <TableCell>Learning Outcomes Evaluated</TableCell>\n                                <TableCell>Weight</TableCell>\n                                <TableCell>Edit</TableCell>\n                                <TableCell>Delete</TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {tableRows.map((row, index) => (\n                                <TableRow key={index}>\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.one}\n                                                onChange={(e) => setValue(index, 'one', e.target.value)} placeholder='Enter Component' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.one}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.two}\n                                                onChange={(e) => setValue(index, 'two', e.target.value)} placeholder='Enter Outcomes' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.two}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.three}\n                                                onChange={(e) => setValue(index, 'three', e.target.value)} placeholder='Enter Weight' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.three}\n                                        </TableCell>)}\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <EditIcon onClick={() => startEdit(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CheckIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <DeleteIcon onClick={(e) => deleteRow(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CloseIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                            <TableRow>\n                                <TableCell align=\"left\"></TableCell>\n                                <TableCell align=\"right\">Total Weight:</TableCell>\n                                <TableCell align=\"left\">{sum}</TableCell>\n                                <TableCell align=\"left\"></TableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <br />\n\n                <div>\n                    <Button onClick={addRow} variant='contained' color='primary'>\n                        Create Row\n                            </Button>\n                </div>\n            </div>\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n\n};\n\nfunction Textbook() {\n\n    const createRow = (one, two, three, four, five) => {\n        return { one, two, three, four, five };\n    };\n    const [tableRows, setTableRows] = useState([createRow(\"\", \"\", \"\", \"\", \"\")]);\n    const setValue = (index, column, value) => {\n        let newRows = tableRows;\n        newRows[index][column] = value;\n        setTableRows(newRows);\n        console.log(tableRows);\n    };\n    const deleteRow = (index) => {\n        console.log(index)\n        console.log(tableRows)\n\n        let arr = [...tableRows]\n\n        arr.splice(index, 1)\n\n        setTableRows(arr)\n\n        console.log(tableRows)\n\n    };\n    const addRow = () => {\n        setTableRows(tableRows.concat([createRow(\"\", \"\", \"\", \"\", \"\")]));\n        console.log(tableRows)\n    };\n    const [editIdx, setEditIdx] = useState(-1);\n    const startEdit = idx => {\n        setEditIdx(idx);\n    };\n    const stopEdit = () => {\n        setEditIdx(-1);\n    };\n\n    return (\n        <Box Box width=\"95%\" align='left'>\n            <h2>\n                8. Textbook\n            </h2>\n\n            <div>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Title</TableCell>\n                                <TableCell>Author</TableCell>\n                                <TableCell>Edition, Year</TableCell>\n                                <TableCell>Publisher</TableCell>\n                                <TableCell>Required/ Recommended</TableCell>\n                                <TableCell>Edit</TableCell>\n                                <TableCell>Delete</TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {tableRows.map((row, index) => (\n                                <TableRow key={index}>\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.one}\n                                                onChange={(e) => setValue(index, 'one', e.target.value)} placeholder='Enter Title' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.one}\n                                        </TableCell>)}\n\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.two}\n                                                onChange={(e) => setValue(index, 'two', e.target.value)} placeholder='Enter Author' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.two}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.three}\n                                                onChange={(e) => setValue(index, 'three', e.target.value)} placeholder='Enter Edition, Year' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.three}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.four}\n                                                onChange={(e) => setValue(index, 'four', e.target.value)} placeholder='Enter Publisher' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.four}\n                                        </TableCell>)}\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <Select\n                                                defaultValue={row.five}\n                                                onChange={(e) => setValue(index, 'five', e.target.value)} >\n                                                <MenuItem value=\"\">\n                                                    <em>None</em>\n                                                </MenuItem>\n                                                <MenuItem value={\"Required\"}>Required</MenuItem>\n                                                <MenuItem value={\"Recommended\"}>Recommended</MenuItem>\n                                            </Select>\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.five}\n                                        </TableCell>)}\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <EditIcon onClick={() => startEdit(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CheckIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <DeleteIcon onClick={(e) => deleteRow(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CloseIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <br />\n\n                <div>\n                    <Button onClick={addRow} variant='contained' color='primary'>\n                        Create Row\n                            </Button>\n                </div>\n            </div>\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n};\n\nfunction CoursePolicies() {\n\n    const createRow = (one) => {\n        return { one };\n    };\n    const [tableRows, setTableRows] = useState([createRow(\"\")]);\n    const setValue = (index, column, value) => {\n        let newRows = tableRows;\n        newRows[index][column] = value;\n        setTableRows(newRows);\n        console.log(tableRows);\n    };\n    const deleteRow = (index) => {\n        console.log(index)\n        console.log(tableRows)\n\n        let arr = [...tableRows]\n\n        arr.splice(index, 1)\n\n        setTableRows(arr)\n\n        console.log(tableRows)\n\n    };\n    const addRow = () => {\n        setTableRows(tableRows.concat([createRow(\"\")]));\n        console.log(tableRows)\n    };\n    const [editIdx, setEditIdx] = useState(-1);\n    const startEdit = idx => {\n        setEditIdx(idx);\n    };\n    const stopEdit = () => {\n        setEditIdx(-1);\n    };\n\n    return (\n        <Box Box width=\"95%\" align='left'>\n            <h2>\n                9. Course Policies\n            </h2>\n\n            <div>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Policy</TableCell>\n                                <TableCell>Edit</TableCell>\n                                <TableCell>Delete</TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {tableRows.map((row, index) => (\n                                <TableRow key={index}>\n                                    {editIdx === index ? (\n                                        <TableCell align=\"left\">\n                                            <TextField defaultValue={row.one}\n                                                multiline={true}\n                                                rows={12}\n                                                rowsMax={12}\n                                                fullWidth={true}\n                                                onChange={(e) => setValue(index, 'one', e.target.value)} placeholder='Enter Policy' />\n                                        </TableCell>) :\n                                        (<TableCell>\n                                            {row.one}\n                                        </TableCell>)}\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <EditIcon onClick={() => startEdit(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CheckIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {editIdx !== index ? (\n                                            <DeleteIcon onClick={(e) => deleteRow(index)} style={{ cursor: \"pointer\" }} />\n                                        ) : (\n                                                <CloseIcon onClick={stopEdit} style={{ cursor: \"pointer\" }} />\n                                            )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <br />\n\n                <div>\n                    <Button onClick={addRow} variant='contained' color='primary'>\n                        Create Row\n                            </Button>\n                </div>\n            </div>\n\n            <br></br>\n            <br></br>\n        </Box>\n    );\n};\n\n\nfunction MenuBar({ handleSaveOpen, handleSave }) {\n\n    return (\n        <AppBar Position='static'>\n            <Toolbar>\n                <section>\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\n                        Save\n                    </Button>\n                </section>\n            </Toolbar>\n        </AppBar>\n\n\n\n    );\n};\n\nfunction CreateSaveDialog({ open, handleSaveClose }) {\n    return (\n        <Dialog open={open}>\n            <DialogTitle>\n                Outline Created\n        </DialogTitle>\n            <DialogContent>\n                <Box>\n                    <body>\n                        This is a dummy button to demonstrate that the inputs will be recorded into a database.\n            </body>\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleSaveClose} color=\"primary\">\n                    Cancel\n                 </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};","/home/evan/Documents/ENSF607/ENSF-607-Web-Development-Project/CourseOutlineBuilder/outline_frontend/src/Save.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":162,"column":9,"nodeType":"58","messageId":"59","endLine":162,"endColumn":22},{"ruleId":"56","severity":1,"message":"60","line":170,"column":9,"nodeType":"58","messageId":"59","endLine":170,"endColumn":22},{"ruleId":"56","severity":1,"message":"61","line":25,"column":8,"nodeType":"58","messageId":"59","endLine":25,"endColumn":12},{"ruleId":"56","severity":1,"message":"62","line":38,"column":11,"nodeType":"58","messageId":"59","endLine":38,"endColumn":18},{"ruleId":"56","severity":1,"message":"63","line":42,"column":23,"nodeType":"58","messageId":"59","endLine":42,"endColumn":35},{"ruleId":"56","severity":1,"message":"64","line":51,"column":12,"nodeType":"58","messageId":"59","endLine":51,"endColumn":28},{"ruleId":"56","severity":1,"message":"65","line":52,"column":12,"nodeType":"58","messageId":"59","endLine":52,"endColumn":22},{"ruleId":"56","severity":1,"message":"66","line":53,"column":12,"nodeType":"58","messageId":"59","endLine":53,"endColumn":23},{"ruleId":"56","severity":1,"message":"67","line":53,"column":25,"nodeType":"58","messageId":"59","endLine":53,"endColumn":39},{"ruleId":"56","severity":1,"message":"68","line":54,"column":12,"nodeType":"58","messageId":"59","endLine":54,"endColumn":24},{"ruleId":"56","severity":1,"message":"69","line":55,"column":12,"nodeType":"58","messageId":"59","endLine":55,"endColumn":23},{"ruleId":"56","severity":1,"message":"70","line":56,"column":12,"nodeType":"58","messageId":"59","endLine":56,"endColumn":27},{"ruleId":"56","severity":1,"message":"71","line":57,"column":12,"nodeType":"58","messageId":"59","endLine":57,"endColumn":21},{"ruleId":"56","severity":1,"message":"72","line":58,"column":12,"nodeType":"58","messageId":"59","endLine":58,"endColumn":20},{"ruleId":"56","severity":1,"message":"73","line":60,"column":12,"nodeType":"58","messageId":"59","endLine":60,"endColumn":18},{"ruleId":"56","severity":1,"message":"74","line":60,"column":20,"nodeType":"58","messageId":"59","endLine":60,"endColumn":29},{"ruleId":"75","severity":1,"message":"76","line":280,"column":8,"nodeType":"77","endLine":280,"endColumn":10,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"79","line":453,"column":8,"nodeType":"77","endLine":454,"endColumn":6,"suggestions":"80"},{"ruleId":"56","severity":1,"message":"81","line":936,"column":12,"nodeType":"58","messageId":"59","endLine":936,"endColumn":20},{"ruleId":"56","severity":1,"message":"69","line":963,"column":12,"nodeType":"58","messageId":"59","endLine":963,"endColumn":23},{"ruleId":"82","severity":1,"message":"83","line":1015,"column":13,"nodeType":"84","messageId":"85","endLine":1019,"endColumn":14},{"ruleId":"82","severity":1,"message":"83","line":1033,"column":13,"nodeType":"84","messageId":"85","endLine":1037,"endColumn":14},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'displayErrors' is assigned a value but never used.","Identifier","unusedVar","'displayFields' is assigned a value but never used.","'Save' is defined but never used.","'classes' is assigned a value but never used.","'setOutlineID' is assigned a value but never used.","'learningOutcomes' is assigned a value but never used.","'timetables' is assigned a value but never used.","'instructors' is assigned a value but never used.","'setInstructors' is assigned a value but never used.","'examinations' is assigned a value but never used.","'calculators' is assigned a value but never used.","'gradeComponents' is assigned a value but never used.","'textbooks' is assigned a value but never used.","'policies' is assigned a value but never used.","'loaded' is assigned a value but never used.","'setLoaded' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getCalculators', 'getCalendarInformation', 'getExaminations', 'getGradeComponents', 'getLearningOutcomes', 'getOutline', 'getPolicies', 'getTextbooks', 'getTimetables', and 'outlineID'. Either include them or remove the dependency array.","ArrayExpression",["88"],"React Hook useEffect has missing dependencies: 'calendarInfoID', 'createCalendarInfo', and 'setCalendarInfo'. Either include them or remove the dependency array.",["89"],"'examInfo' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},"Update the dependencies array to be: [getCalculators, getCalendarInformation, getExaminations, getGradeComponents, getLearningOutcomes, getOutline, getPolicies, getTextbooks, getTimetables, outlineID]",{"range":"94","text":"95"},"Update the dependencies array to be: [courseDesc, courseHours, courseCredits, calendarRef, calendarInfo.outline, setCalendarInfo, createCalendarInfo, calendarInfoID]",{"range":"96","text":"97"},[10185,10187],"[getCalculators, getCalendarInformation, getExaminations, getGradeComponents, getLearningOutcomes, getOutline, getPolicies, getTextbooks, getTimetables, outlineID]",[16191,16271],"[courseDesc, courseHours, courseCredits, calendarRef, calendarInfo.outline, setCalendarInfo, createCalendarInfo, calendarInfoID]"]